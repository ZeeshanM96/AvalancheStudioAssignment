pipeline {
    agent any
    options {
        timestamps()
    }
    parameters {
        extendedChoice(
            name: 'PLATFORMS',
            type: 'PT_CHECKBOX',
            multiSelectDelimiter: ',',
            quoteValue: false,
            visibleItemCount: 3,
            description: 'Select platforms',
            value: 'Steam,Epic,XboxOne',
            defaultValue: 'Steam,Epic,XboxOne'
        )
        extendedChoice(
            name: 'CONFIGURATIONS',
            type: 'PT_CHECKBOX',
            multiSelectDelimiter: ',',
            quoteValue: false,
            visibleItemCount: 2,
            description: 'Select configurations',
            value: 'debug,final',
            defaultValue: 'debug,final'
        )
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    if (fileExists('Artifacts')) {
                        deleteDir() 
                    }
                    dir('Artifacts') {
                        echo "Created Artifacts directory"
                        env.START_TIME = "${new Date().time}"
                    }
                }
            }
        }
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'ZeeshanM96Token', url: 'https://github.com/ZeeshanM96/AvalancheStudioAssignment.git'
            }
        }
        stage('Prepare') {
            steps {
                script {
                    def platforms = params.PLATFORMS.tokenize(',')
                    def configurations = params.CONFIGURATIONS.tokenize(',')
                    echo "Selected platforms: ${platforms}"
                    echo "Selected configurations: ${configurations}"
                    def parallelStages = [:]
                    for (platform in platforms) {
                        def currentPlatform = platform
                        // Build content once per platform, configuration agnostic
                        parallelStages["Content-${currentPlatform}"] = {
                            stage("Build Content - ${currentPlatform}") {
                                    dir('resources') {
                                        boolean contentbuildSuccess = false
                                        try {
                                            bat "build.bat ${currentPlatform} build"
                                            contentbuildSuccess = true
                                        } catch (Exception e) {
                                            echo "build.bat failed or not found for platform ${currentPlatform}, now trying build.sh."
                                            try {
                                                bat "build.sh ${currentPlatform} build"
                                                contentbuildSuccess = true
                                            } catch (Exception e2) {
                                                currentBuild.result = 'FAILURE'
                                                echo "Build Content failed for platform ${currentPlatform}: Both build.bat and build.sh could not be executed."
                                                echo "Error from build.bat: ${e.message}"
                                                echo "Error from build.sh: ${e2.message}"
                                            }
                                        }
                                        if (contentbuildSuccess) {
                                            if (!fileExists('content_output')) {
                                                echo "content_output directory does not exist, creating..."
                                                bat 'mkdir content_output'
                                            }
                                            archiveArtifacts artifacts: 'content_output/**', onlyIfSuccessful: true
                                            writeFile file: "../Artifacts/${currentPlatform}_content.flag", text: 'success'
                                        } else {
                                            echo "Error: content build was not successful for platform ${currentPlatform}"
                                        }
                                    }
                            }
                        }
                        // Build code for each platform and configuration
                        for (config in configurations) {
                            def platformName = platform.trim()
                            def configName = config.trim()
                            parallelStages["Code-${platformName}-${configName}"] = {
                                stage("Build Code - ${platformName} - ${configName}") {
                                        dir('source') {
                                            boolean codebuildSuccess = false
                                            try {
                                                bat "build.bat ${platformName} ${configName} build"
                                                codebuildSuccess = true
                                            } catch (Exception e) {
                                                echo "build.bat failed or not found for platform ${platformName} & configuration ${configName}, now trying build.sh."
                                                try {
                                                    bat "build.sh ${platformName} ${configName} build"
                                                    codebuildSuccess = true
                                                } catch (Exception e2) {
                                                    currentBuild.result = 'FAILURE'
                                                    echo "Build Code failed for platform ${platformName}, configuration ${configName}: Both build.bat and build.sh could not be executed."
                                                    echo "Error from build.bat: ${e.message}"
                                                    echo "Error from build.sh: ${e2.message}"
                                                }
                                            }
                                            if (codebuildSuccess) {
                                            if (!fileExists('code_output')) {
                                                echo "code_output directory does not exist, creating..."
                                                bat 'mkdir code_output'
                                            }
                                            archiveArtifacts artifacts: 'code_output/**', onlyIfSuccessful: true
                                            writeFile file: "../Artifacts/${platformName}_${configName}code.flag", text: 'success'
                                        } else {
                                            echo "Error: code build was not successful for platform ${platformName}"
                                        }
                                        }
                                }
                            }
                        }
                    }

                    // Execute code and content build stages in parallel
                    parallel parallelStages
                }
            }
        }
        stage('Package and Test') {
            steps {
                script {
                    def platforms = params.PLATFORMS.tokenize(',')
                    def configurations = params.CONFIGURATIONS.tokenize(',')
                    def parallelStages = [:]
                    for (platform in platforms) {
                        for (config in configurations) {
                            def platformName = platform.trim()
                            def configName = config.trim()
                            parallelStages["Package-and-Test-${platformName}-${configName}"] = {
                                stage("Package and Test - ${platformName} - ${configName}") {
                                    script {
                                        // Check if build artifacts exist
                                        boolean codeBuildSuccess = fileExists "Artifacts\\${platformName}_${configName}_code.flag"
                                        boolean contentBuildSuccess = fileExists "Artifacts\\${platformName}_content.flag"
                                        if (codeBuildSuccess && contentBuildSuccess) {
                                            // Package
                                            dir('scripts') {
                                                boolean packageAttempted = false
                                                try {
                                                    bat "build.bat ${platformName} ${configName} package"
                                                    writeFile file: "../Artifacts/${platformName}_${configName}_package.flag", text: 'success'
                                                    packageAttempted = true
                                                } catch (Exception e) {
                                                    echo "build.bat failed for platform ${platformName} & configuration ${configName}, now trying build.sh."
                                                    try {
                                                        sh "build.sh ${platformName} ${configName} package"
                                                        writeFile file: "../Artifacts/${platformName}_${configName}_package.flag", text: 'success'
                                                        packageAttempted = true
                                                    } catch (Exception e2) {
                                                        currentBuild.result = 'FAILURE'
                                                        echo "Package failed for platform ${platformName}, configuration ${configName}: Both build.bat and build.sh could not be executed."
                                                        echo "Error from build.bat: ${e.message}"
                                                        echo "Error from build.sh: ${e2.message}"
                                                    }
                                                }
                                                // Test only if package was attempted (either bat or sh succeeded)                                           
                                                if (packageAttempted) {
                                                    boolean packageSuccess = fileExists "${WORKSPACE}\\Artifacts\\${platformName}_${configName}_package.flag"
                                                    if (packageSuccess) {
                                                        try {
                                                            bat "build.bat ${platformName} ${configName} test"
                                                        } catch (Exception e) {
                                                            echo "build.bat failed for platform ${platformName} & configuration ${configName}, now trying build.sh."
                                                            try {
                                                                sh "build.sh ${platformName} ${configName} test"
                                                            } catch (Exception e2) {
                                                                currentBuild.result = 'FAILURE'
                                                                echo "Test failed for platform ${platformName}, configuration ${configName}: Both build.bat and build.sh could not be executed."
                                                                echo "Error from build.bat: ${e.message}"
                                                                echo "Error from build.sh: ${e2.message}"
                                                            }
                                                        }
                                                    } else {
                                                        echo "Skipping Test for ${platformName} - ${configName} due to missing package."
                                                    }
                                                }
                                            }
                                        } else {
                                            echo "Skipping Package and Test for ${platformName} - ${configName} due to missing build artifacts."
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // Execute packaging and testing in parallel
                    parallel parallelStages
                }
            }
        }
    }
    post {
        always {
            script {
            long endTime = new Date().time
            long startTime = env.START_TIME.toLong()
            long duration = endTime - startTime
            int totalSeconds = (int) (duration / 1000)
            int seconds = totalSeconds % 60
            int totalMinutes = totalSeconds / 60  
            int minutes = totalMinutes % 60
            int hours = totalMinutes / 60  
            String readableDuration = String.format("%02d:%02d:%02d", hours, minutes, seconds)
            echo "Total time taken for the pipeline: ${readableDuration}"
            }
            echo 'Pipeline execution completed.'
        }
        failure {
            echo "Build failed on ${env.STAGE_NAME} stage"
            echo "Failure cause: ${currentBuild.result}"
        }
    }
}
