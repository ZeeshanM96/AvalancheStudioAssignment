pipeline {
    agent any
    parameters {
        choice(name: 'PLATFORMS', choices: ['Steam', 'Epic', 'XboxOne'], description: 'Select platforms')
        choice(name: 'CONFIGURATIONS', choices: ['debug', 'final'], description: 'Select configurations')
    }
    stages {
        stage('Checkout') {
            steps {
                // Git checkout step
                git branch: 'main', credentialsId: 'ZeeshanM96Token', url: 'https://github.com/ZeeshanM96/AvalancheStudioAssignment.git'
            }
        }
        stage('Prepare') {
            steps {
                script {
                    def platforms = params.PLATFORMS.tokenize(',')
                    def configurations = params.CONFIGURATIONS.tokenize(',')
                    def parallelStages = [:]
                    for (platform in platforms) {
                        // Build content once per platform, configuration agnostic
                        parallelStages["Content-${platform}"] = {
                            stage("Build Content - ${platform}") {
                                    dir('resources') {
                                        try {
                                            bat "build.sh ${platform} build"
                                        } catch (Exception e) {
                                            currentBuild.result = 'FAILURE'
                                            echo "Build Content failed for platform ${platform}: ${e.message}"
                                            echo "${e.printStackTrace()}"
                                            error "Build Content failed for platform ${platform}"
                                        }
                                    }
                                // } // Remove this line
                            }
                        }
                        // Build code for each platform and configuration
                        for (config in configurations) {
                            def platformName = platform.trim() // Declare inside the loop
                            def configName = config.trim() // Declare inside the loop
                            parallelStages["Code-${platformName}-${configName}"] = {
                                stage("Build Code - ${platformName} - ${configName}") {
                                    // steps { // Remove this line
                                        dir('source') {
                                            try {
                                                bat "build.sh ${platformName} ${configName} build"
                                            } catch (Exception e) {
                                                currentBuild.result = 'FAILURE'
                                                echo "Build Code failed for platform ${platformName}, configuration ${configName}: ${e.message}"
                                                echo "${e.printStackTrace()}"
                                                error "Build Code failed for platform ${platformName}, configuration ${configName}"
                                            }
                                        }
                                    // } // Remove this line
                                }
                            }
                        }
                    }

                    // Execute code and content build stages in parallel
                    parallel parallelStages
                }
            }
        }
        stage('Package and Test') {
            steps {
                script {
                    def platforms = params.PLATFORMS.tokenize(',')
                    def configurations = params.CONFIGURATIONS.tokenize(',')
                    def parallelStages = [:]
                    for (platform in platforms) {
                        for (config in configurations) {
                            def platformName = platform.trim()
                            def configName = config.trim()
                            parallelStages["Package-and-Test-${platformName}-${configName}"] = {
                                stage("Package and Test - ${platformName} - ${configName}") {
                                    // steps { // Remove this line
                                        // Package
                                        dir('scripts') {
                                            try {
                                                bat "build.sh ${platformName} ${configName} package"
                                            } catch (Exception e) {
                                                currentBuild.result = 'FAILURE'
                                                echo "Package failed for platform ${platformName}, configuration ${configName}: ${e.message}"
                                                echo "${e.printStackTrace()}"
                                                error "Package failed for platform ${platformName}, configuration ${configName}"
                                            }
                                        }
                                        // Test
                                        dir('scripts') {
                                            try {
                                                bat "build.sh ${platformName} ${configName} test"
                                            } catch (Exception e) {
                                                currentBuild.result = 'FAILURE'
                                                echo "Test failed for platform ${platformName}, configuration ${configName}: ${e.message}"
                                                echo "${e.printStackTrace()}"
                                                error "Test failed for platform ${platformName}, configuration ${configName}"
                                            }
                                        }
                                    // } // Remove this line
                                }
                            }
                        }
                    }
                    // Execute packaging and testing in parallel
                    parallel parallelStages
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution completed.'
        }
        failure {
            echo "Build failed on ${env.STAGE_NAME} stage"
            echo "Failure cause: ${currentBuild.result}"
            // Add any additional logging or actions for failure
        }
    }
}
