pipeline {
    agent any
    options {
        timestamps()
    }
    environment {
        START_TIME = new Date().time
    }
    parameters {
        extendedChoice(
            name: 'PLATFORMS',
            type: 'PT_CHECKBOX',
            multiSelectDelimiter: ',',
            quoteValue: false,
            visibleItemCount: 3,
            // choiceType: 'PT_MULTI_SELECT',
            description: 'Select platforms',
            value: 'Steam,Epic,XboxOne',
            defaultValue: 'Steam,Epic,XboxOne'
        )
        extendedChoice(
            name: 'CONFIGURATIONS',
            type: 'PT_CHECKBOX',
            multiSelectDelimiter: ',',
            quoteValue: false,
            visibleItemCount: 2,
            // choiceType: 'PT_MULTI_SELECT',
            description: 'Select configurations',
            value: 'debug,final',
            defaultValue: 'debug,final'
        )
    }
    stages {
        stage('Checkout') {
            steps {
                // Git checkout step
                git branch: 'main', credentialsId: 'ZeeshanM96Token', url: 'https://github.com/ZeeshanM96/AvalancheStudioAssignment.git'
            }
        }
        stage('Prepare') {
            steps {
                script {
                    def platforms = params.PLATFORMS.tokenize(',')
                    def configurations = params.CONFIGURATIONS.tokenize(',')
                    echo "Selected platforms: ${platforms}"
                    echo "Selected configurations: ${configurations}"
                    def parallelStages = [:]
                    for (platform in platforms) {
                        def currentPlatform = platform
                        // Build content once per platform, configuration agnostic
                        parallelStages["Content-${currentPlatform}"] = {
                            stage("Build Content - ${currentPlatform}") {
                                    dir('resources') {
                                        try {
                                            bat "build.bat ${currentPlatform} build"
                                        } catch (Exception e) {
                                            echo "build.bat failed or not found for platform ${currentPlatform}, now trying build.sh."
                                            try {
                                                bat "build.sh ${currentPlatform} build"
                                            } catch (Exception e2) {
                                                currentBuild.result = 'FAILURE'
                                                echo "Build Content failed for platform ${currentPlatform}: Both build.bat and build.sh could not be executed."
                                                echo "Error from build.bat: ${e.message}"
                                                echo "Error from build.sh: ${e2.message}"
                                            }
                                        }
                                    }
                            }
                        }
                        // Build code for each platform and configuration
                        for (config in configurations) {
                            def platformName = platform.trim()
                            def configName = config.trim()
                            parallelStages["Code-${platformName}-${configName}"] = {
                                stage("Build Code - ${platformName} - ${configName}") {
                                        dir('source') {
                                            try {
                                                bat "build.bat ${platformName} ${configName} build"
                                            } catch (Exception e) {
                                                echo "build.bat failed or not found for platform ${platform} & configuration ${configName}, now trying build.sh."
                                                try {
                                                    bat "sh build.sh ${platformName} ${configName} build"
                                                } catch (Exception e2) {
                                                    currentBuild.result = 'FAILURE'
                                                    echo "Build Code failed for platform ${platformName}, configuration ${configName}: Both build.bat and build.sh could not be executed."
                                                    echo "Error from build.bat: ${e.message}"
                                                    echo "Error from build.sh: ${e2.message}"
                                                }
                                            }
                                        }
                                }
                            }
                        }
                    }

                    // Execute code and content build stages in parallel
                    parallel parallelStages
                }
            }
        }
        stage('Package and Test') {
            steps {
                script {
                    def platforms = params.PLATFORMS.tokenize(',')
                    def configurations = params.CONFIGURATIONS.tokenize(',')
                    def parallelStages = [:]
                    for (platform in platforms) {
                        for (config in configurations) {
                            def platformName = platform.trim()
                            def configName = config.trim()
                            parallelStages["Package-and-Test-${platformName}-${configName}"] = {
                                stage("Package and Test - ${platformName} - ${configName}") {
                                        // Package
                                        dir('scripts') {
                                            try {
                                                bat "build.bat ${platformName} ${configName} package"
                                            } catch (Exception e) {
                                                echo "build.bat failed or not found for platform ${platform} & configuration ${configName}, now trying build.sh."                                                
                                                try {
                                                    bat "sh build.sh ${platformName} ${configName} package"
                                                } catch (Exception e2) {
                                                    currentBuild.result = 'FAILURE'
                                                    echo "Package failed for platform ${platformName}, configuration ${configName}: Both build.bat and build.sh could not be executed."
                                                    echo "Error from build.bat: ${e.message}"
                                                    echo "Error from build.sh: ${e2.message}"
                                                }
                                            }
                                        }
                                        // Test
                                        dir('scripts') {
                                            try {
                                                bat "build.bat ${platformName} ${configName} test"
                                            } catch (Exception e) {
                                                echo "build.bat failed or not found for platform ${platform} & configuration ${configName}, now trying build.sh."
                                                try {
                                                    bat "sh build.sh ${platformName} ${configName} test"
                                                } catch (Exception e2) {
                                                    currentBuild.result = 'FAILURE'
                                                    echo "Test failed for platform ${platformName}, configuration ${configName}: Both build.bat and build.sh could not be executed."
                                                    echo "Error from build.bat: ${e.message}"
                                                    echo "Error from build.sh: ${e2.message}"
                                                }
                                            }
                                        }
                                }
                            }
                        }
                    }
                    // Execute packaging and testing in parallel
                    parallel parallelStages
                }
            }
        }
    }
    post {
        always {
            script {
                // Capturing end time
                def endTime = new Date().time
                // Calculating duration in milliseconds
                def duration = endTime - env.START_TIME
                // Converting duration from milliseconds to a more readable format
                def readableDuration = DurationFormatUtils.formatDuration(duration, 'HH:mm:ss,SSS', true)
                // Logging the total time taken for the pipeline
                echo "Total time taken for the pipeline: ${readableDuration}"
            }
            echo 'Pipeline execution completed.'
        }
        failure {
            echo "Build failed on ${env.STAGE_NAME} stage"
            echo "Failure cause: ${currentBuild.result}"
            // Add any additional logging or actions for failure
        }
    }
}
